pico-8 cartridge // http://www.pico-8.com
version 15
__lua__
--traffic world
--by john wilkinson

-- start ext ./utils.lua

make_pool = (function()
 local function each(pool,f)
  for v in all(pool.store) do
   if v.alive then
    f(v)
   end
  end
 end

 local function sort_by(pool,sort_value_f)
  pool:each(function(m)
   m._sort_value=sort_value_f(m)
  end)

  -- http://www.lexaloffle.com/bbs/?tid=2477
  local a=pool.store
  for i=1,#a do
   local j = i
   while j > 1 and a[j-1]._sort_value < a[j]._sort_value do
    a[j],a[j-1] = a[j-1],a[j]
    j = j - 1
   end
  end
 end

 local function is_any(pool)
  local res = false
  pool:each(function(m)
   res = true
  end)
  return res
 end

 local function min(pool,key)
  local min
  pool:each(function(m)
   if not min then
    min = m[key]
   elseif m[key] < min then
    min = m[key]
   end
  end)
  return min
 end

 local function max(pool,key)
  local min
  pool:each(function(m)
   if not min then
    min = m[key]
   elseif m[key] > min then
    min = m[key]
   end
  end)
  return min
 end

 local function count(pool)
  local res=0
  for i=1,#pool.store do
   if pool.store[i].alive then
    res+=1
   end
  end
  return res
 end

 local function kill(obj)
  obj.alive = false
 end

 return function(store)
  store = store or {}
  local id_counter = 0
  return {
   each = each,
   store = store,
   sort_by = sort_by,
   is_any = is_any,
   min = min,
   max = max,
   count = count,
   make = function(obj)
    obj = obj or {}
    obj.alive = true
    local id = false

    for k,v in pairs(store) do
     if not v.alive then
      id = k
     end
    end

    if not id then
     id_counter+= 1
     id = id_counter
    end
    store[id] = obj
    obj.kill = kill
    return obj
   end
  }
 end
end)()

-- end ext

-- start ext ./lanes.lua
make_lane = (function()
 local offset_threshold = 30
 local min_velocity = .2
 local max_velocity = .4

 local function draw_lane(lane)
  lane.floaters:each(function(f)
   f:draw(lane)
  end)

  local car
  local total_offset = lane.offset
  local first_to_draw = flr((camera_y-total_offset) / car_space_height)
  local last_to_draw = first_to_draw + ceil(128 / car_space_height) + 1

  if #lane.linkers > 0 and last_to_draw >= 1 and first_to_draw <= #lane.linkers then
   first_to_draw = max(1,first_to_draw)
   last_to_draw = min(#lane.linkers,last_to_draw)

   for i=first_to_draw,last_to_draw do
    lane.linkers[i]:draw()
   end
  end

  lane.joiners:each(function(j)
   j:draw(lane)
  end)
 end

 local function update_lane(lane)
  lane.offset+=lane.v
  if lane.offset > offset_threshold and lane.v > -min_velocity then
   lane.v-= rnd(max_velocity-min_velocity)
  elseif lane.offset < -offset_threshold and lane.v < min_velocity then
   lane.v+= rnd(max_velocity-min_velocity)
  end

  lane.joiners:each(function(j)
   j:update(lane)
  end)
  lane.floaters:each(function(f)
   f:update(lane)
  end)
 end

 local function try_lane_switch_from_neighbor(lane_to, lane_from)
  if lane_to:has_joiners() then
   return
  end

  local y = lane_to:get_tail_y()+car_space_height

  local target_index = lane_from:get_car_index_at_y(y)

  if target_index > 0 and target_index <= #lane_from.linkers then
   local linker = lane_from.linkers[target_index]

   local min_floater = lane_to.floaters:min('y')

   if min_floater and min_floater <= linker:get_y() + car_space_height then
    return
   end

   if linker.car.is_player then
    return
   end

   if lane_to.index > lane_from.index then
    linker.car:turn_right()
   else
    linker.car:turn_left()
   end

   lane_to:crash_in(linker.car,linker:get_y())
   lane_from:remove_car_at(target_index)
  end
 end

 local function get_tail_y(lane)
  return lane.offset + #lane.linkers * car_space_height
 end

 local function linker_draw(linker)
  linker.car:draw(lane_index_to_car_x(linker.lane.index),linker:get_y())
 end

 local function linker_get_y(linker)
  return linker.lane.offset + (linker.car_index-1) * car_space_height
 end

 local function make_linker(lane,car,car_index)
  return {
   lane=lane,
   car=car,
   car_index=car_index,
   draw=linker_draw,
   get_y=linker_get_y
  }
 end

 local function lane_append_car(lane,car)
  add(lane.linkers,make_linker(lane,car,#lane.linkers+1))
 end

 local function lane_has_joiners(lane)
  return lane.joiners:is_any()
 end

 local function get_car_index_at_y(lane,y)
  return ceil((y-lane.offset) / car_space_height)
 end

 local function lane_remove_car_at(lane,car_index)
  local linker
  for i = #lane.linkers,car_index+1,-1 do
   linker = lane.linkers[i]
   lane.joiners.make(make_joiner(linker.car,linker:get_y()))
   lane.linkers[i]=nil
  end

  lane.linkers[car_index] = nil
 end

 local function lane_crash_in(lane,car,y)
  local target_car_index = lane:get_car_index_at_y(y)
  if target_car_index <= #lane.linkers then
   local linker = lane.linkers[target_car_index]
   if car.is_player then
    --blah()
    move_delay=max_move_delay
    if not linker then
     won=true
     lane.joiners.make(make_joiner(car,y)) --todo - this is awful
     return
    end
   end

   lane.floaters.make(make_floater(linker.car,linker:get_y()))
   lane:remove_car_at(target_car_index)
  end
  lane.joiners.make(make_joiner(car,y))

  --TODO - handle the case of switching lanes into the front of the herd
 end

 local function lane_find_player_index(lane)
  for i=1,#lane.linkers do
   if lane.linkers[i].car.is_player then
    return i
   end
  end
  return nil
 end

 return function(index, car_count)
  local obj = {
   draw=draw_lane,
   update=update_lane,
   linkers={},
   offset=(rnd(2)-1)*offset_threshold,
   index=index,
   v=rnd(max_velocity - min_velocity)+min_velocity,
   get_tail_y=get_tail_y,
   append_car=lane_append_car,
   get_car_index_at_y=get_car_index_at_y,
   crash_in=lane_crash_in,
   try_lane_switch_from_neighbor=try_lane_switch_from_neighbor,
   has_joiners=lane_has_joiners,
   find_player_index=lane_find_player_index,
   remove_car_at=lane_remove_car_at,
   joiners=make_pool(),
   floaters=make_pool()
  }
  if (rnd(1) > .5) then
   obj.v = -obj.v
  end
  for i=1,car_count do
   obj:append_car(make_car())
  end
  return obj
 end
end)()
-- end ext

-- start ext ./police.lua
police = {}
police = (function()
 local function check_police_in_lane_at_y(lane,y)
  target_index = lane:get_car_index_at_y(y)
  if target_index > 0 and target_index < #lane.linkers and lane.linkers[target_index].car.is_police then
   lost=true
   lane.linkers[target_index].car.arresting=true
  end
 end

 local function check_police_in_lane_for_car_at_y(lane,y)
  check_police_in_lane_at_y(lane,y+2)
  check_police_in_lane_at_y(lane,y+6)
  lane.joiners:each(function(j)
   if j.car.is_police and abs(j.y - y) <= 4 then
    lost=true
    j.car.arresting=true
   end
  end)
 end

 local function check_police_next_to_player()
  local p = get_player_linker()

  if p then
   if p.car_index > 1 and p.lane.linkers[p.car_index-1].car.is_police then
    lost=true
    p.lane.linkers[p.car_index-1].car.arresting=true
   elseif p.car_index < #p.lane.linkers and p.lane.linkers[p.car_index+1].car.is_police then
    lost=true
    p.lane.linkers[p.car_index+1].car.arresting=true
   end
  end

  p = p or get_player_joiner()
  local y = p:get_y()
  if player_lane > 1 then
   check_police_in_lane_for_car_at_y(lanes[player_lane-1],y)
  end
  if player_lane < 15 then
   check_police_in_lane_for_car_at_y(lanes[player_lane+1],y)
  end
 end

 local function update()
  if not won then
   check_police_next_to_player()
  end

  police.cars:each(function(c)
   if not lost or c.arresting == true then
    if not c.delay or c.delay <= 0 then
     local swp = c.color_map[2]
     c.color_map[2] = c.color_map[3]
     c.color_map[3] = swp
     c.delay = 10
    end
    c.delay-=1
   end
  end)
 end

 local function make()
  if police.cars:count() < 35 then
   local car = make_car()
   car.primary_color=7
   car.secondary_color=5
   car.color_map = {}
   car.color_map[2] = 8
   car.color_map[3] = 12
   car.sprite_id=9
   car.straight_sprite_id=9
   car.turn_left_sprite_id=14
   car.turn_right_sprite_id=15
   car.is_police=true
   police.cars.make(car)
   local lane=lanes[ceil(rnd(15))]
   local y=max(camera_y+150,lane:get_tail_y())
   if lane.joiners:is_any() then
    y = max(y,lane.joiners:max('y')+car_space_height)
   end
   lane.joiners.make(make_joiner(car,y))
  end
 end

 return {
  cars=make_pool(),
  update=update,
  make=make
 }
end)()
-- end ext

-- start ext ./main.lua
car_space_height = 9
crash_height = 8

function _init()
 police.cars=make_pool()
 all_cars = make_pool()

 ground_offset=0
 lanes={}
 update_camera_y(400)
 is_intro=true
 won=false
 lost=false
 move_delay=0
 reset_turn_sprite_delay=0

 for i=1,15 do
  add(lanes,make_lane(i,40))
 end

 player_animation = {7,10,7,11}

 player_car = make_car()
 player_car.is_player = true
 player_car.sprite_id = 7
 player_car.primary_color = 8
 player_car.secondary_color = 2
 player_lane=8

 lanes[player_lane].joiners.make(make_joiner(player_car,550))
end

function update_camera_y(new_y)
 camera_y = new_y
 --camera(0,new_y)
end

make_car = (function()
 local max_reset_turn_delay = 5

 local function draw_car(car,x,y)
  pal(8,car.primary_color)
  pal(9,car.secondary_color)
  if car.color_map then
   for k,v in pairs(car.color_map) do
    pal(k,v)
   end
  end
  spr(car.sprite_id,x,y-camera_y)
 end

 local function update_car(car)
  if car.reset_turn_sprite_delay > 0 then
   car.reset_turn_sprite_delay-= 1
   if car.reset_turn_sprite_delay <= 0 then
    car.sprite_id = car.straight_sprite_id
   end
  end
 end

 local function car_turn_left(car)
  car.sprite_id = car.turn_left_sprite_id
  car.reset_turn_sprite_delay = max_reset_turn_delay
 end

 local function car_turn_right(car)
  car.sprite_id = car.turn_right_sprite_id
  car.reset_turn_sprite_delay = max_reset_turn_delay
 end

 local primary_colors = {3,4,13}
 local secondary_colors = {5,5,5}

 return function()
  local color_index = ceil(rnd(#primary_colors))
  local obj = {
   draw=draw_car,
   primary_color=primary_colors[color_index],
   secondary_color=secondary_colors[color_index],
   turn_left_sprite_id=12,
   turn_right_sprite_id=13,
   straight_sprite_id=6,
   reset_turn_sprite_delay=0,
   update=update_car,
   turn_left=car_turn_left,
   turn_right=car_turn_right,
   color_map=false,
   sprite_id=6
  }
  all_cars.make(obj)
  return obj
 end
end)()

function lane_index_to_car_x(index)
 return index*8-4
end

make_joiner = (function()
 local speed=.7

 local function update_joiner(joiner, lane)
  joiner.y-=speed
  if lane:get_tail_y() >= joiner.y then
   lane:append_car(joiner.car)
   joiner:kill()
   return
  end
  if joiner.car.is_player then
   return
  end

  local is_crashed = false
  lane.floaters:each(function(f)
   if abs(joiner.y-f.y) <= crash_height then
    is_crashed = true
   end
  end)
  if is_crashed then
   lane.floaters.make(make_floater(joiner.car,joiner.y))
   joiner:kill()
  end
 end

 local function draw_joiner(joiner, lane)
  joiner.car:draw(lane_index_to_car_x(lane.index),joiner.y)
 end

 local function joiner_get_y(joiner)
  return joiner.y
 end

 return function(car,y)
  local obj = {
   y=y,
   car=car,
   get_y=joiner_get_y,
   update=update_joiner,
   draw=draw_joiner
  }
  return obj
 end
end)()

make_floater = (function()
 local speed=.8

 local function update_floater(floater,lane)
  floater.y+=speed
  if floater.y > camera_y+128 then
   floater.car:kill()
   floater:kill()
   return
  end

  if lane:get_tail_y() > floater.y and floater.y >= lane.offset then

   local target_car_index = lane:get_car_index_at_y(floater.y+crash_height)
   if target_car_index <= #lane.linkers then
    local linker = lane.linkers[target_car_index]
    if not linker.car.is_player then
     lane.floaters.make(make_floater(linker.car,linker:get_y()))
     lane:remove_car_at(target_car_index)
    end
   end
  end
 end

 local function draw_floater(floater,lane)
  floater.car:draw(lane_index_to_car_x(lane.index),floater.y)
 end

 local function floater_get_y(floater)
  return floater.y
 end

 return function(car,y)
  local obj = {
   y=y,
   car=car,
   get_y=floater_get_y,
   update=update_floater,
   draw=draw_floater
  }
  car.sprite_id=8
  return obj
 end
end)()

function get_player_linker()
 local player_index = lanes[player_lane]:find_player_index()
 if player_index then
  return lanes[player_lane].linkers[player_index]
 else
  return nil
 end
end

function get_player_joiner()
 local joiner
 lanes[player_lane].joiners:each(function(j)
  if j.car.is_player then
   joiner = j
  end
 end)

 return joiner
end

function get_player_manager()
 return get_player_linker() or get_player_joiner()
end

function move_player(lane_offset)
 local player_linker = get_player_linker()

 if player_linker then
  lanes[player_lane+lane_offset]:crash_in(player_car,player_linker:get_y())
  lanes[player_lane]:remove_car_at(player_linker.car_index)
 else
  local player_joiner = get_player_joiner()
  lanes[player_lane+lane_offset]:crash_in(player_car,player_joiner:get_y())
  player_joiner:kill()
 end
 player_lane+=lane_offset
end

max_move_delay=40
function can_move()
 if move_delay and move_delay > 0 then
  move_delay-=1
  player_car.sprite_id = player_animation[flr(move_delay^.5*2)%4+1]
  local scaled = max(move_delay*3-80,0)
  camera(sin(scaled^2/100)*scaled/30,cos(scaled^2/80)*scaled/30)
  return false
 end
 if player_car.reset_turn_sprite_delay <= 0 then
  player_car.sprite_id=7
 end
 return true
end

function _update60()
 police.update()

 if lost or won then
  if btn(4) or btn(5) then
   _init()
  end
  return
 end

 ground_offset+=1
 if ground_offset >= 8 then
  ground_offset = 0
 end

 for lane in all(lanes) do lane:update() end

 if can_move() then
  if btnp(0) and player_lane > 1 then
   player_car:turn_left()
   move_player(-1)
  elseif btnp(1) and player_lane < #lanes then
   player_car:turn_right()
   move_player(1)
  end
 end

 if won then
  return
 end
 -- attempt ai lane switches
 for i=1,#lanes-1 do
  lanes[i]:try_lane_switch_from_neighbor(lanes[i+1])
  lanes[i+1]:try_lane_switch_from_neighbor(lanes[i])
 end

 if is_intro and get_player_manager():get_y()-50 < camera_y then
  is_intro = false
 end

 if not is_intro then
  police.make()
  update_camera_y(get_player_manager():get_y()-50)
 end

 all_cars:each(function(c)
  c:update()
 end)
end

function _draw()
 cls()
 for roadx=0,13 do
  for roady=-1,16 do
   spr(5,roadx*8+4,-camera_y%8+roady*8+ground_offset)
  end
 end
 for lane in all(lanes) do lane:draw() end
 line(3,0,3,127,10)
 line(123,0,123,127,10)
 if lost then
  rectfill(48,27,78,39,1)
  rect(49,28,77,38,7)
  print("busted",52,31,7)
 end
 if won then
  pal()
  rectfill(46,27,80,39,3)
  rect(47,28,79,38,7)
  print("escaped",50,31,7)
 end
end
-- end ext
__gfx__
0000000000888800000008888880000000000000000000000088800000818000c000000000777000981800000008189098880000000888906777000000077760
00000000c888888c0c828888888828c00000000000000000098889000981890000880c0006777600981890000098189098889000009888906777600000677760
007007000c8888c00028888888888200000000000000000788ccc88088ccc88008c0800067ccc76018ccc00000ccc81018ccc00000ccc81017ccc00000ccc710
000770000c8888c002c8888888888c2000888800000000000c888c000c818c0000880800022733009c81890009818c909c88890009888c906c22330002233c60
0007700008cccc8002c8888888888c2008888880000000000c888c000c818c000c8890c0222733309c81890009818c909c88890009888c906222333022233360
0070070008cccc8002c8888888888c2008888880000000070988890009818900098889000c777c00018189000981810001888900098881000177760006777100
000000000887788002c8888888888c20088888800000000709ccc90009ccc90009c0800c05ccc50009ccc00000ccc90009ccc00000ccc90005cccc000cccc500
00000000050000500288cccccccc882088cccc880000000709888900098889000888890005777500009880000088900000988000008890000057750005775000
0000000000888800088cccccccccc8800c8888c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000888800088cccccccccc8800c8888c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000088cc8800888cccccccc88800c8888c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000c88c000888888888888880088888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000c88c00088888777788888008cccc800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000888800008888777788880008cccc800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000008cc8000022222222222200088778800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000008888000065000000005600050000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00888000008880000088800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08888800088888000888880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88ccc88788ccc8878888888770000007000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0c888c070c888c0708ccc80770000007000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0c888c000c888c000c888c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08888800088888000c888c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08ccc80708ccc80708ccc80770000007000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08888807088888070888880770000007000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00888000008880000088800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08888800088888000888880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88ccc88788ccc88788ccc88770000007700000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0c888c070c888c070c888c0770000007700000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0c888c000c888c000c888c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08888800088888000888880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08ccc80708ccc80708ccc80770000007700000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08888807088888070888880770000007700000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__label__
000a00000007d5ccc5d70cdddc0782ccc2870deeed0705ddd5070cbbbc07000000070033300709fff90705ccc50700ddd007053335070deeed070ceeec0a0000
000a000000000cdddc000cdddc000c888c00edcccde005ccc50003bbb3000099900005333500f9ccc9f005ddd50005ddd50035ccc530000000000deeed0a0000
000a000000000cdddc0005ddd5000c888c000ceeec0005ddd50003ccc3000499940035ccc5300cfffc0000000000d5ccc5d00c333c0000eee0000dcccd0a0000
000a0000000705ddd50705ccc507028882070ceeec070000000703bbb30794ccc4970c333c070cfffc07008880070cdddc070c333c070deeed070deeed0a0000
000a0000000705ccc50705ddd50702ccc2070deeed0700eee007000000070c999c070c333c0709fff907028882070cdddc0705333507edcccde70000000a0000
000a0000000705ddd50700000007028882070dcccd070deeed07004440070c999c070533350709ccc90782ccc28705ddd50705ccc5070ceeec070000000a0000
000a000000000000000000333000000000000deeed00edcccde0054445000499940005ccc50009fff9000c888c0005ccc500053335000ceeec000000000a0000
000a0000000000fff0000533350000444000000000000ceeec0045ccc54004ccc40005333500000000000c888c0005ddd500000000000deeed000000000a0000
000a0000000709fff90735ccc5370544450700eee0070ceeec070c444c07049994070000000700eee007028882070000000700aaa0070dcccd070000000a0000
000a00000000f9ccc9f00c333c0045ccc5400deeed000deeed000c444c0000000000003330000deeed0002ccc2000044400009aaa9000deeed000000000a0000
000a000000000cfffc000c333c000c444c00edcccde00dcccd00054445000033300005333500edcccde00288820005444500a9ccc9a0000000000000000a0000
000a000000070cfffc07053335070c444c070ceeec070deeed0705ccc5070533350735ccc5370ceeec070000000745ccc5470caaac0700bbb0070000000a0000
000a0000000709fff90705ccc507054445070ceeec07000000070544450735ccc5370c333c070ceeec0700aaa0070c444c070caaac0703bbb3070000000a0000
000a0000000709ccc9070533350705ccc5070deeed0700bbb007000000070c333c070c333c070deeed0709aaa9070c444c0709aaa907b3ccc3b70000000a0000
000a0000000009fff90000000000054445000dcccd0003bbb30000fff0000c333c00053335000dcccd00a9ccc9a00544450009ccc9000cbbbc000000000a0000
000a000000000000000000888000000000000deeed00b3ccc3b009fff9000533350005ccc5000deeed000caaac0005ccc50009aaa9000cbbbc000000000a0000
000a0000000700fff0070288820700ddd007000000070cbbbc07f9ccc9f705ccc50705333507000000070caaac07054445070000000703bbb3070000000a0000
000a0000000009fff90082ccc28005ddd50000fff0000cbbbc000cfffc0005333500000000000088800009aaa900000000000000000003ccc3000000000a0000
000a00000000f9ccc9f00c888c00d5ccc5d009fff90003bbb3000cfffc0000000000003330000288820009ccc900008880000000000003bbb3000000000a0000
000a000000070cfffc070c888c070cdddc07f9ccc9f703ccc30709fff907009990070533350782ccc28709aaa9070288820700000007000000070000000a0000
000a000000070cfffc07028882070cdddc070cfffc0703bbb30709ccc9070499940735ccc5370c888c070000000782ccc28700000007004440070000000a0000
000a0000000709fff90702ccc20705ddd5070cfffc070000000709fff90794ccc4970c333c070c888c07004440070c888c0700000007054445070000000a0000
000a0000000009ccc9000288820005ccc50009fff90000aaa000000000000c999c000c333c0002888200054445000c888c000000000045ccc5400000000a0000
000a0000000009fff9000000000005ddd50009ccc90009aaa900003330000c999c000533350002ccc20045ccc54002888200000000000c444c000000000a0000
000a0000000700000007009990070000000709fff907a9ccc9a7053335070499940705ccc507028882070c444c0702ccc207000000070c444c070000000a0000
000a0000000000aaa0000499940000888000000000000caaac0035ccc53004ccc40005333500000000000c444c000288820000000000054445000000000a0000
000a0000000009aaa90094ccc4900288820000ddd0000caaac000c333c0004999400000000000088800005444500000000000000000005ccc5000000000a0000
000a00000007a9ccc9a70c999c0782ccc28705ddd50709aaa9070c333c070000000700fff0070288820705ccc5070044400700000007054445070000000a0000
000a000000070caaac070c999c070c888c07d5ccc5d709ccc9070533350700fff00709fff90782ccc287054445070544450700000007000000070000000a0000
000a000000070caaac07049994070c888c070cdddc0709aaa90705ccc50709fff907f9ccc9f70c888c070000000745ccc5470000000700fff0070000000a0000
000a0000000009aaa90004ccc400028882000cdddc000000000005333500f9ccc9f00cfffc000c888c0000aaa0000c444c000000000009fff9000000000a0000
000a0000000009ccc9000499940002ccc20005ddd50000ddd000000000000cfffc000cfffc000288820009aaa9000c444c0000000000f9ccc9f00000000a0000
000a0000000709aaa907000000070288820705ccc50705ddd50700eee0070cfffc0709fff90702ccc207a9ccc9a705444507000000070cfffc070000000a0000
000a0000000000000000008880000000000005ddd500d5ccc5d00deeed0009fff90009ccc900028882000caaac0005ccc500000000000cfffc000000000a0000
000a0000000000ddd0000288820000333000000000000cdddc00edcccde009ccc90009fff900000000000caaac00054445000000000009fff9000000000a0000
000a0000000705ddd50782ccc28705333507003330070cdddc070ceeec0709fff907000000070044400709aaa907000000070000000709ccc9070000000a0000
000a00000007d5ccc5d70c888c0735ccc5370533350705ddd5070ceeec0700000007009990070544450709ccc907004440070000000709fff9070000000a0000
000a000000070cdddc070c888c070c333c0735ccc53705ccc5070deeed0700ddd0070499940745ccc54709aaa9070544450700000007000000070000000a0000
000a000000000cdddc00028882000c333c000c333c0005ddd5000dcccd0005ddd50094ccc4900c444c000000000045ccc54000000000000000000000000a0000
000a0000000005ddd50002ccc200053335000c333c00000000000deeed00d5ccc5d00c999c000c444c00008880000c444c0000000000000000000000000a0000
000a0000000705ccc5070288820705ccc5070533350700aaa007000000070cdddc070c999c0705444507028882070c444c0700000007000000070000000a0000
000a0000000005ddd500000000000533350005ccc50009aaa90000fff0000cdddc000499940005ccc50082ccc2800544450000000000000000000000000a0000
000a000000000000000000ddd0000000000005333500a9ccc9a009fff90005ddd50004ccc400054445000c888c0005ccc50000000000000000000000000a0000
000a000000070088800705ddd50700eee007000000070caaac07f9ccc9f705ccc50704999407000000070c888c070544450700000007000000070000000a0000
000a0000000702888207d5ccc5d70deeed07000000070caaac070cfffc0705ddd5070000000700eee007028882070000000700000007000000070000000a0000
000a0000000782ccc2870cdddc07edcccde70000000709aaa9070cfffc070000000700bbb0070deeed0702ccc2070088800700000007000000070000000a0000
000a000000000c888c000cdddc000ceeec000000000009ccc90009fff9000033300003bbb300edcccde0028882000288820000000000000000000000000a0000
000a000000000c888c0005ddd5000ceeec000000000009aaa90009ccc90005333500b3ccc3b00ceeec000000000082ccc28000000000000000000000000a0000
000a000000070288820705ccc5070deeed07000000070000000709fff90735ccc5370cbbbc070ceeec07008880070c888c0700000007000000070000000a0000
000a0000000002ccc20005ddd5000dcccd000000000000fff000000000000c333c000cbbbc000deeed00028882000c888c0000000000000000000000000a0000
000a0000000002888200000000000deeed000000000009fff900006760000c333c0003bbb3000dcccd0082ccc2800288820000000000000000000000000a0000
000a0000000700000007008880070000000700000007f9ccc9f7067676070533350703ccc3070deeed070c888c0702ccc20700000007000000070000000a0000
000a00000007000000070288820700000007000000070cfffc0776ccc67705ccc50703bbb307000000070c888c070288820700000007000000070000000a0000
000a000000070000000782ccc28700000007000000070cfffc070c767c07053335070000000700999007028882070000000700000007000000070000000a0000
000a00000000000000000c888c00000000000000000009fff9000c676c000000000000eee0000499940002ccc20000fff00000000000000000000000000a0000
000a00000000000000000c888c00000000000000000009ccc90006767600000000000deeed0094ccc4900288820009fff90000000000000000000000000a0000
000a000000070000000702888207000000070000000709fff90706ccc60700000007edcccde70c999c0700000007f9ccc9f700000007000000070000000a0000
000a000000000000000002ccc20000000000000000000000000006767600000000000ceeec000c999c0000aaa0000cfffc0000000000000000000000000a0000
000a00000000000000000288820000000000000000000099900000000000000000000ceeec000499940009aaa9000cfffc0000000000000000000000000a0000
000a00000007000000070000000700000007000000070499940700000007000000070deeed0704ccc407a9ccc9a709fff90700000007000000070000000a0000
000a000000070000000700eee007000000070000000794ccc49700000007000000070dcccd07049994070caaac0709ccc90700000007000000070000000a0000
000a00000007000000070deeed0700000007000000070c999c0700000007000000070deeed07000000070caaac0709fff90700000007000000070000000a0000
000a0000000000000000edcccde000000000000000000c999c000000000000000000000000000000000009aaa9000000000000000000000000000000000a0000
000a00000000000000000ceeec00000000000000000004999400000000000000000000ddd0000000000009ccc9000000000000000000000000000000000a0000
000a00000007000000070ceeec07000000070000000704ccc407000000070000000705ddd5070000000709aaa9070000000700000007000000070000000a0000
000a00000000000000000deeed000000000000000000049994000000000000000000d5ccc5d000000000000000000000000000000000000000000000000a0000
000a00000000000000000dcccd0000000000000000000000000000000000000000000cdddc0000000000000000000000000000000000000000000000000a0000
000a00000007000000070deeed07000000070000000700eee00700000007000000070cdddc0700000007000000070000000700000007000000070000000a0000
000a00000007000000070000000700000007000000070deeed07000000070000000705ddd50700000007000000070000000700000007000000070000000a0000
000a000000070000000700eee0070000000700000007edcccde7000000070000000705ccc50700000007000000070000000700000007000000070000000a0000
000a00000000000000000deeed0000000000000000000ceeec00000000000000000005ddd50000000000000000000000000000000000000000000000000a0000
000a0000000000000000edcccde000000000000000000ceeec0000000000000000000000000000000000000000000000000000000000000000000000000a0000
000a00000007000000070ceeec0700000007000000070deeed07000000070000000700aaa00700000007000000070000000700000007000000070000000a0000
000a00000000000000000ceeec0000000000000000000dcccd00000000000000000009aaa90000000000000000000000000000000000000000000000000a0000
000a00000000000000000deeed0000000000000000000deeed000000000000000000a9ccc9a000000000000000000000000000000000000000000000000a0000
000a00000007000000070dcccd0700000007000000070000000700000007000000070caaac0700000007000000070000000700000007000000070000000a0000
000a00000007000000070deeed07000000070000000700eee00700000007000000070caaac0700000007000000070000000700000007000000070000000a0000
000a00000007000000070000000700000007000000070deeed07000000070000000709aaa90700000007000000070000000700000007000000070000000a0000
000a0000000000000000000000000000000000000000edcccde0000000000000000009ccc90000000000000000000000000000000000000000000000000a0000
000a00000000000000000000000000000000000000000ceeec00000000000000000009aaa90000000000000000000000000000000000000000000000000a0000
000a00000007000000070000000700000007000000070ceeec0700000007000000070000000700000007000000070000000700000007000000070000000a0000
000a00000000000000000000000000000000000000000deeed0000000000000000000000000000000000000000000000000000000000000000000000000a0000
000a00000000000000000000000000000000000000000dcccd0000000000000000000000000000000000000000000000000000000000000000000000000a0000
000a00000007000000070000000700000007000000070deeed0700000007000000070000000700000007000000070000000700000007000000070000000a0000
000a00000007000000070000000700000007000000070000000700000007000000070000000700000007000000070000000700000007000000070000000a0000
000a00000007000000070000000700000007000000070000000700000007000000070000000700000007000000070000000700000007000000070000000a0000
000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000
000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000
000a00000007000000070000000700000007000000070000000700000007000000070000000700000007000000070000000700000007000000070000000a0000
000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000
000a00000000000000000000000000000000000000000000000000000000007570000000000000000000000000000000000000000000000000000000000a0000
000a00757007007570070075700700757007007570070075700700757007057575070075700700757007007570070075700700757007007570070075700a0000
000a0575750705757507057575070575750705757507057575070575750775ccc5770575750705757507057575070575750705757507057575070575750a0000
000a75ccc57775ccc57775ccc57775ccc57775ccc57775ccc57775ccc5778887ccc775ccc57775ccc57775ccc57775ccc57775ccc57775ccc57775ccc57a0000
000accc788808887ccc0ccc78880ccc788808887ccc08887ccc08887ccc08887ccc08887ccc0ccc78880ccc788808887ccc0ccc788808887ccc0ccc7888a0000
000accc788808887ccc0ccc78880ccc788808887ccc08887ccc08887ccc0057575008887ccc0ccc78880ccc788808887ccc0ccc788808887ccc0ccc7888a0000
000a0575750705757507057575070575750705757507057575070575750705ccc5070575750705757507057575070575750705757507057575070575750a0000
000a05ccc50005ccc50005ccc50005ccc50005ccc50005ccc50005ccc5000575750005ccc50005ccc50005ccc50005ccc50005ccc50005ccc50005ccc50a0000
000a05757500057575000575750005757500057575000575750005757500000000000575750005757500057575000575750005757500057575000575750a0000
000a00000007000000070000000700000007000000070000000700000007007570070000000700000007000000070000000700000007000000070000000a0000
000a00757007000000070000000700757007000000070075700700757007057575070075700700757007007570070075700700757007007570070000000a0000
000a0575750700000007000000070575750700000007057575070575750775ccc5770575750705757507057575070575750705757507057575070000000a0000
000a75ccc570000000000000000075ccc5700000000075ccc57075ccc5708887ccc075ccc57075ccc57075ccc57075ccc57075ccc57075ccc5700000000a0000
000a8887ccc000000000000000008887ccc0000000008887ccc08887ccc08887ccc0ccc78880ccc788808887ccc08887ccc08887ccc0ccc788800000000a0000
000a8887ccc700000007000000078887ccc7000000078887ccc78887ccc705757507ccc78887ccc788878887ccc78887ccc78887ccc7ccc788870000000a0000
000a0575750000000000000000000575750000000000057575000575750005ccc5000575750005757500057575000575750005757500057575000000000a0000
000a05ccc500000000000000000005ccc5000000000005ccc50005ccc5000575750005ccc50005ccc50005ccc50005ccc50005ccc50005ccc5000000000a0000
000a05757507000000070000000705757507000000070575750705757507000000070575750705757507057575070575750705757507057575070000000a0000
000a00000007000000070000000700000007000000070000000700000007007570070000000700000007000000070000000700000007000000070000000a0000
000a00000007000000070000000700000007000000070075700700000007057575070075700700000007007570070075700700757007007570070000000a0000
000a0000000000000000000000000000000000000000057575000000000075ccc5700575750000000000057575000575750005757500057575000000000a0000
000a000000000000000000000000000000000000000075ccc57000000000ccc7888075ccc5700000000075ccc57075ccc57075ccc57075ccc5700000000a0000
000a0000000700000007000000070000000700000007ccc7888700000007ccc78887ccc78887000000078887ccc78887ccc78887ccc78887ccc70000000a0000
000a0000000000000000000000000000000000000000ccc788800000000005757500ccc78880000000008887ccc08887ccc08887ccc08887ccc00000000a0000
000a0000000000000000000000000000000000000000057575000000000005ccc5000575750000000000057575000575750005757500057575000000000a0000
000a000000070000000700000007000000070000000705ccc507000000070575750705ccc5070000000705ccc50705ccc50705ccc50705ccc5070000000a0000
000a00000007000000070000000700000007000000070575750700000007000000070575750700000007057575070575750705757507057575070000000a0000
000a00000007000000070000000700000007000000070000000700000007007570070000000700000007000000070000000700000007000000070000000a0000
000a00000000000000000000000000000000000000000000000000000000057575000000000000000000007570000000000000000000007570000000000a0000
000a0000000000000000000000000000000000000000000000000000000075ccc5700000000000000000057575000000000000000000057575000000000a0000
000a00000007000000070000000700000007000000070000000700000007ccc78887000000070000000775ccc577000000070000000775ccc5770000000a0000
000a00000000000000000000000000000000000000000000000000000000ccc7888000000000000000008887ccc000000000000000008887ccc00000000a0000
000a000000000000000000000000000000000000000000000000000000000575750000000000000000008887ccc000000000000000008887ccc00000000a0000
000a0000000700000007000000070000000700000007000000070000000705ccc5070000000700000007057575070000000700000007057575070000000a0000
000a0000000700000007000000070000000700000007000000070000000705757507000000070000000705ccc507000000070000000705ccc5070000000a0000
000a00000007000000070000000700000007000000070000000700000007000000070000000700000007057575070000000700000007057575070000000a0000
000a00000000000000000000000000000000000000000000000000000000007570000000000000000000000000000000000000000000000000000000000a0000
000a00000000000000000000000000000000000000000000000000000000057575000000000000000000007570000000000000000000000000000000000a0000

